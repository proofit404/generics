{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Generics \u00b6 A classy toolkit designed with OOP in mind. Documentation | Source Code | Task Tracker In our opinion, main benefits of having objects implemented in the language are encapsulation and polymorphous. Classes that could be easily used in a composition are tricky to write. The generics library aims to help you in writing code with high quality. Pros \u00b6 Real private attributes without loosing the readability Leads to a better design forcing you to use encapsulation properly Makes writing quality code with high cohesion and low coupling easier Guides you to follow SOLID principles Example \u00b6 The generics library gives you an easy way to define private attributes on objects without loosing little nice things like readability. >>> from attr import attrs , attrib >>> from generics import private >>> @private ... @attrs ( frozen = True ) ... class User : ... name = attrib () ... ... def greet ( self ): ... return f 'Hello, { self . name } ' >>> user = User ( 'Jeff' ) >>> user . greet () 'Hello, Jeff' >>> hasattr ( user , 'name' ) False Questions \u00b6 If you have any questions, feel free to create an issue in our Task Tracker . We have the question label exactly for this purpose. License \u00b6 Generics library is offered under the two clause BSD license. \u2014 \u2b50\ufe0f \u2014 The generics library is part of the SOLID python family.","title":"Home"},{"location":"#generics","text":"A classy toolkit designed with OOP in mind. Documentation | Source Code | Task Tracker In our opinion, main benefits of having objects implemented in the language are encapsulation and polymorphous. Classes that could be easily used in a composition are tricky to write. The generics library aims to help you in writing code with high quality.","title":"Generics"},{"location":"#pros","text":"Real private attributes without loosing the readability Leads to a better design forcing you to use encapsulation properly Makes writing quality code with high cohesion and low coupling easier Guides you to follow SOLID principles","title":"Pros"},{"location":"#example","text":"The generics library gives you an easy way to define private attributes on objects without loosing little nice things like readability. >>> from attr import attrs , attrib >>> from generics import private >>> @private ... @attrs ( frozen = True ) ... class User : ... name = attrib () ... ... def greet ( self ): ... return f 'Hello, { self . name } ' >>> user = User ( 'Jeff' ) >>> user . greet () 'Hello, Jeff' >>> hasattr ( user , 'name' ) False","title":"Example"},{"location":"#questions","text":"If you have any questions, feel free to create an issue in our Task Tracker . We have the question label exactly for this purpose.","title":"Questions"},{"location":"#license","text":"Generics library is offered under the two clause BSD license. \u2014 \u2b50\ufe0f \u2014 The generics library is part of the SOLID python family.","title":"License"},{"location":"changelog/","text":"1.0.0 (2020-07-03) \u00b6 Features \u00b6 implement @private decorator ( 1d237eb )","title":"1.0.0 (2020-07-03)"},{"location":"changelog/#100-2020-07-03","text":"","title":"1.0.0 (2020-07-03)"},{"location":"changelog/#features","text":"implement @private decorator ( 1d237eb )","title":"Features"}]}